generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") 
}

model Task {
  id String @id @default(uuid())

  taskId String?  @unique //The id of the task onchain

  metadataHash String? //the metadata ipfs hash
  proposalId String?  //If this task is a draft task, so its not still a task, but has its own proposal Id

  isDraft  Boolean @default(false) //If this task is a draft task, so its not still a task, but has its own proposal Id
  isDraftCompleted  Boolean @default(false) //If this task is a draft task and it went through the voting and was approved

  status String? //The task status -> 0, 1, 2 - ['open', 'active', 'completed']

  taskTaken Boolean @default(false) //If the task was taken

  type String? @default("Individual") //the type of the task -> individual or group

  skills String[] @default([]) //the skills of this task. ex: Frontend, Backend, Solidity

  skillsSearch String? //parameter mandatory to execute case insensitive searchs on the database - additional paramater to facilitate the searchs on database

  engineersRequirement String? //Of the total contributors needed, what is the tech requirement of this team (ex: 1 developer, 1 UI/UX, 1 PM) etc

  departament String?   //the departament of the task

  deadline String? //the task deadline in Unix timestamp

  description String? //task desc

  title String? //task title

  file String? //The file hash on ipfs (if its got any file linked to the task)

  links String[] //["{"title": "My video","url": "https://www.youtube.com/watch?v=zizonToFXDs"}"]

  applications String @default("[]") //A stringified array opf applications for the task -> struct OffChainApplication {address applicant; bool accepted; Reward[] reward;}

  payments Payment[]
  Application Application[]
  ApplicationOffChain ApplicationOffChain[]
  Submission Submission[]
  DraftVote DraftVote[]

  estimatedBudget String @default("0") //getting the value from the tokens we return the estimated budget in USD.

  contributorsNeeded String @default("1") //number of contributors need

  contributors String[] //["{"address": "0xa..."}"]

  executor String? //If the task was taken (application accepted and etc), who is the address that is in charge of doing the task

  projectLength String @default("Less than 1 week") //How much time is estimated to complete the task 

  metadataEdited Boolean @default(false) //When the metadata for this task is eddited, set this parameter as true
  budgetIncreased Boolean @default(false) //When the budget for this task is eddited, set this parameter as true
  deadlineIncreased Boolean @default(false) //When the deadline for this task is eddited, set this parameter as true

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  isOpenmesh Boolean @default(false) //If this is a task created by the openemesh team

  startDate String? //the task draft start date of voting in Unix timestamp
  endDate String? //the task draft  end date of voting in Unix timestamp
  aragonMetadata String?
  
  creator String? //The task creator
  manager String? //The task manager
  
  hasSpamLink Boolean @default(false) //used to track if the task description has any pottencial link spam

  @@unique([proposalId, departament])

  @@map("task")
}

//Used to control the workflow of voting for draft tasks
model DraftVote {
  id String @id @default(uuid())

  address String? //The user address that voted

  votingPower String @default("1")

  voteOption String? //{        None,        Abstain,        Yes,        No    }  -> 0, 1, 2 or 3

  id_task String  
  task   Task  @relation(fields: [id_task], references: [id])

  @@unique([id_task, address])

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("draftVote")
}

model TaskDraft {
  id String @id @default(uuid())

  proposalId String  @unique //The id of the task draft onchain

  status String? //The task status -> 0, 1 - ['open', 'closed']

  type String? @default("Individual") //the type of the task -> individual or group

  skills String[] @default([]) //the skills of this task. ex: Frontend, Backend, Solidity

  skillsSearch String? //parameter mandatory to execute case insensitive searchs on the database - additional paramater to facilitate the searchs on database

  engineersRequirement String? //Of the total contributors needed, what is the tech requirement of this team (ex: 1 developer, 1 UI/UX, 1 PM) etc

  departament String?   //the departament of the task

  deadline String? //the task deadline in Unix timestamp

  description String? //task desc

  title String? //task title

  file String? //The file hash on ipfs (if its got any file linked to the task)

  links String[] //["{"title": "My video","url": "https://www.youtube.com/watch?v=zizonToFXDs"}"]

  payments PaymentTaskDraft[]

  estimatedBudget String @default("0") //getting the value from the tokens we return the estimated budget in USD.

  contributorsNeeded String @default("1") //number of contributors need

  contributors String[] //["{"address": "0xa..."}"]

  executor String? //If the task was taken (application accepted and etc), who is the address that is in charge of doing the task

  projectLength String @default("Less than 1 week") //How much time is estimated to complete the task 

  startDate String? //the task draft start date of voting in Unix timestamp
  endDate String? //the task draft  end date of voting in Unix timestamp
  aragonMetadata String?

  hasSpamLink Boolean @default(false) //used to track if the task description has any pottencial link spam

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("taskDraft")
}

model Departament {
  id String @id @default(uuid())

  name String?  @unique //The name of the departament

  addressTaskDrafts String? //The address of the task draft contract -> TaskDrafts.sol

  addressDAO String? //The address of the DAO contract -> IDAO.sol

  addressTokenListGovernance String? //The address of the tokenListGovernance contract -> TokenListGovernance.sol

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("departament")
}

//Each verified contributor receives a NFT that is related to its voting power on the DAO departaments decisions, this parameter indicates what is (if the user is a verified contributor) tokenId of the nft
model VerifiedContributorToken {
  id String @id @default(uuid())

  tokenId String?  @unique //The tokenId
  departamentList String[] //List of addresses of the departaments TokenListGovernance.sol that this tokenId is member of

  userId String  
  user   User  @relation(fields: [userId], references: [id])
  
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("verifiedContributorToken")
}


model PaymentTaskDraft {
    id String @id @default(uuid())

    tokenContract String //the token contract of the payment task
    amount String //The amount
    decimals String //Decimals of the smart-contract token

    proposalId String  
    task   TaskDraft  @relation(fields: [proposalId], references: [id])

    createdAt    DateTime  @default(now())
    updatedAt    DateTime? @updatedAt

    @@map("paymentTaskDraft")
}

model Payment {
    id String @id @default(uuid())

    tokenContract String //the token contract of the payment task
    amount String //The amount
    decimals String //Decimals of the smart-contract token

    taskId String  
    task   Task  @relation(fields: [taskId], references: [id])

    createdAt    DateTime  @default(now())
    updatedAt    DateTime? @updatedAt

    @@map("payment")
}

// Applications on-chain
model Application {
    id String @id @default(uuid())

    applicationId String //Application id onchain
    metadata String? //The metadata hash
    reward  String[] //Rewards: struct Reward {bool nextToken; address to; uint88 amount;}
    proposer String? //Proposer
    applicant String? //Applicant

    accepted Boolean @default(false) //If the application was accepted
    taken    Boolean @default(false) //After the application  is accepted, if the submitter took the task to work on it.

    metadataDescription String? //Application description
    metadataProposedBudget String? //Percentage of how much of the budget the user is asking for
    metadataAdditionalLink String?
    metadataDisplayName String? // The name that the user wants to show in his application

    timestamp String? //Timestamp Unix global in seconds of when the event was emitted;

    transactionHash String? //The hash of the transaction that emitted the vent
    blockNumber     String @default("0")

    taskId String  
    task   Task  @relation(fields: [taskId], references: [taskId])

    createdAt    DateTime  @default(now())
    updatedAt    DateTime? @updatedAt

    @@unique([taskId, applicationId]) //cannot exist application with same taskId and applicationId
    @@map("application")
}

// Applications off-chain
model ApplicationOffChain {
    id String @id @default(uuid())

    metadata String? //The metadata hash
    reward  String[] //Rewards: struct Reward {bool nextToken; address to; uint88 amount;}
    proposer String? //Proposer
    applicant String? //Applicant

    accepted Boolean @default(false) //If the application was accepted
    taken    Boolean @default(false) //After the application is accepted, if the submitter took the task to work on it.

    metadataDescription String? //Application description
    metadataProposedBudget String? //Percentage of how much of the budget the user is asking for
    metadataAdditionalLink String?
    metadataDisplayName String? // The name that the user wants to show in his application

    openmeshExpertUserId String  
    openmeshExpertUser   OpenmeshExpertUser  @relation(fields: [openmeshExpertUserId], references: [id])

    taskId String  
    task   Task  @relation(fields: [taskId], references: [taskId])

    offChain Boolean @default(true)

    createdAt    DateTime  @default(now())
    timestamp String?      @default("1698253") //Timestamp Unix global in seconds of when the event was emitted;

    updatedAt    DateTime? @updatedAt

    @@map("applicationOffChain")
}

model Submission {
    id String @id @default(uuid())

    submissionId String //Submission id onchain
    metadata String //The metadata hash
    proposer String //Proposer
    applicant String //Applicant

    accepted Boolean @default(false) //If the application was accepted
    reviewed Boolean @default(false) //If the application was reviewed

    review String? //The review outcome of this submission -> { None, Accepted, Rejected } -> 0, 1, 2

    metadataDescription String? //Application description
    metadataAdditionalLinks String[] @default([])

    metadataReviewFeedback String? //If its submission was reviewed, what was the feedback?
    metadataReview String? //If its submission was reviewed, what was the metadataHash
    timestampReview String? //If its submission was reviewed, what was the timestamp
    executorReview  String? //If its submission was reviewed, what was the executor

    timestamp String //Timestamp Unix global in seconds of when the event was emitted;

    transactionHash String //The hash of the transaction that emitted the vent
    blockNumber     String @default("0")

    taskId String  
    task   Task  @relation(fields: [taskId], references: [taskId])

    createdAt    DateTime  @default(now())
    updatedAt    DateTime? @updatedAt

    @@unique([taskId, submissionId]) //cannot exist submission with same taskId and submissionId
    @@map("submission")
}

//events emitted by the smart-contracts
model Event {
  id String @id @default(uuid())

  name String  //The event name
  data String  //The event data

  eventIndex String? //The logIndex
  transactionHash String? //The transaction hash
  blockNumber     String @default("0")

  taskId String? //If the event is related to a task

  address String? //Address related to the event (msg.sender / application sender etc)

  timestamp String? //Timestamp Unix global in seconds of when the event was emitted;

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@unique([eventIndex, transactionHash, blockNumber]) //cannot exist event with same event info and transactionHash
  @@map("event")
}


//Users of the protocol
model User {
  id String @id @default(uuid())

  name String?   //The user display name
  address String? @unique //The user address

  verifiedContributorToken String? //Each verified contributor receives a NFT that is related to its voting power on the DAO departaments decisions, this parameter indicates what is (if the user is a verified contributor) tokenId of the nft

  profilePictureHash String? //The user profile picture - ipfs hash
  tags  String[] @default([]) //The user tags - "Data managment"; "Frontend"... etc
  links String [] @default([]) //The user links

  joinedSince String? //Timestamp Unix Global in seconds of when the user joined the protocol

  updatesNonce String @default("0") //Nonce that managens everytime a profile update is done, to control the message signing.

  jobSuccess String?   //Variable (0 - 100) that says the percentage of job success of the user - everytime a job he is in charge of is completed, it counts as a success
  totalEarned String? //Variable that says the total amount that the user earned based on the tasks that he completed (the estimated amount in USD)

  VerifiedContributorSubmission VerifiedContributorSubmission[]
  VerifiedContributorToken VerifiedContributorToken[]

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("user")
}

//To become a verified-contributor, an user can submit a request.
model VerifiedContributorSubmission {
  id String @id @default(uuid())

  description String? //"Please give us some details about your qualifications to be a Verified Contributor"

  links String [] @default([]) //The submission links

  githubLogin String? //Ex: bruno353
  githubHTMLUrl String? //Ex: https://github.com/bruno353
  githubId String? //Ex: 82957886
  githubName String? //Ex: Bruno Santos
  githubEmail String? //Ex: tibiapro58@gmail.com
  githubAccessToken String?

  status String @default("pending") //the stauts of application - pending, approved, recused.

  userId String  
  user   User  @relation(fields: [userId], references: [id])

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("verifiedContributorSubmission")
}

//Table utilized to store info about the speakers that are going to register on the calendly of the conference/hackathon 2023 - each registration is a "event"
model SpeakersRegistrationCalendly {
  id String @id @default(uuid())

  uri String? //Unique identifier that links with the event
  userName String? //The speaker name
  userEmail String? //The speaker email
  additionalInfo String? //Additional info like questions responses, descriptions etc
  eventName String? //The event name

  eventAt DateTime? //When the event is ocurring
  timezone String? //The event timezone time

  active Boolean @default(true) //if the event is active, if it was canceled or reschedule this will be false
  reschedule Boolean @default(false)

  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt

  @@map("speakersRegistrationCalendly")
}

model OpenmeshExpertUser {

  id       String @id @default(uuid())

  // AS THE USER CAN LOGIN EITHER WITH EMAIL + PASSWORD or WITH WEB3 LOGIN (SINGING A MESSAGE WITH ITS WALLET) - BOTH EMAIL AND PASSWORD CAN BE OPTIONAL (AS THE WEB3 ADDRESS)
  email    String? @unique //unique
  password String?
  web3Address String? @unique

  updatesNonce String @default("1") //Nonce that managens everytime a profile signin is done, to control the message signing.

  equinixAPIKey String?
  aivenAPIKey String?
  aivenAPIServiceUriParams String?
  validationCloudAPIKeyEthereum String?
  validationCloudAPIKeyPolygon String?

  companyName String?
  firstName String?
  lastName String?
  foundingYear Int?
  location String?
  website String?
  personalBlog String?
  githubLink String?
  tags String[]
  description String?
  scheduleCalendlyLink String?
  profilePictureHash String?
  walletAddress String? //when registering to become a verified contributor, user can input its wallet.
  isCompany Boolean @default(false) //if its not, it means its a individual.

  scheduleCall Boolean @default(false)

  userEnabled     Boolean @default(true)

  registrationByVerifiedContributor   Boolean @default(false) //if the user registred to become a verified contributor

  confirmedEmail       Boolean?  @default(false)
  hashConfirmEmail    String?
  registrationByOpenRD Boolean @default(false) // if the user registered through the openrd plataform. 
  timestampCodeEmail  String?   

  pageRedirect  String?

  RecoverPassword     RecoverPassword[]
  ApplicationOffChain ApplicationOffChain[]
  Xnode               Xnode[]
  Deployment          Deployment[]
  PythiaChats         PythiaChat[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  @@map("openmeshExpertUser")
}

model Session {

  id       String @id @default(uuid())
  sessionToken String   

  createdAt        DateTime  @default(now())
  updatedAt        DateTime? @updatedAt

  @@map("session")

}

model OpenmeshDataProviders {

  id       String @id @default(uuid())

  name String?
  description String?
  sql String?
  tags String[] @default([])
  useCases String[] @default([])
  popularity Int @default(0) //the greater, the more popular
  company String?
  live Boolean @default(false)
  free Boolean @default(false)
  isThirdParty Boolean @default(false)
  dataSpace String @default("0 MB")
  download Boolean @default(false)
  downloadCSVLink String @default("")
  liveLink String @default("wss://ws.tech.l3a.xyz")
  website String?
  addToXnodeMessage String @default("Coming Soon") 
  location String?
  foundingYear String?
  relevantDocs String?
 
  linkDevelopersDocs String?
  linkProducts   String?
  linkCareers    String?
  linkTwitter    String?
  linkContact    String?
  linkAboutUs    String?
  linkMedium     String?
  linkLinkedin   String?
  linkGithub     String?

  type String @default("data") // - the product type, ex: data, analytics, apis etc.

  category String? // - the product type, ex: data, analytics, apis etc.

  dataCloudName String?
  dataCloudLink String?

  logoURL String?
  logoWithCompanyNameURL String?

  dataGithubName String?
  dataGithubLink String?

  createdAt     DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("openmeshDataProviders")
}

// imports from https://docs.google.com/spreadsheets/d/10wuk398wg7PyfZ3saE0KMScWhPM1uXgHPYPkVxQap2c/edit#gid=0
model OpenmeshTemplateProducts {
  id String @id @default(uuid())

  providerName String?
  productName String?
  location String?

  cpuCores String?
  cpuThreads String?
  cpuGHZ String?
  hasSGX Boolean @default(false)

  ram String?

  numberDrives  String?
  avgSizeDrive String?
  storageTotal String?

  gpuType String?
  gpuMemory String?

  bandwidthNetwork String?
  network String?

  priceHour String?
  priceMonth String?

  availability String?

  source String?

  unit String?

  type String @default("data") // - the product type, ex: data, analytics, apis etc.

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("openmeshTemplateProducts")
}

//imports for the "Find your Template" Xnode webpage
model OpenmeshTemplateData {
  id String @id @default(uuid())

  name String?
  description String?
  price String?
  logoUrl String?
  tags String[]

  systemMinRequirements String?
  systemRecommendedRequirements String?

  productsIncluded String[] //ex: {productName: , description: , tags: , infraId}
  techDiagrams String?

  source String? @default("openmesh")

  category String? @default("validatorNode")

  TemplateDataProduct TemplateDataProduct[]

  featured   Boolean @default(false)

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("openmeshTemplateData")
}

model TemplateDataProduct {
  id String @id @default(uuid())

  name String?
  description String?

  openmeshTemplateDataId String   
  openmeshTemplateData   OpenmeshTemplateData  @relation(fields: [openmeshTemplateDataId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("templateDataProduct")
}

model RecoverPassword { 
  id String @id @default(uuid())

  email     String
  txid      String @unique
  timeStamp String
  isValid   Boolean @default(true)

  
  openmeshExpertUserId String   
  openmeshExpertUser   OpenmeshExpertUser  @relation(fields: [openmeshExpertUserId], references: [id])
   
  createdAt     DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("recoverPassword")
}

// Note(Tom): This is out of date, keeping it here for compatibility/reference.
model Xnode { 
  id String @id @default(uuid())

  name        String?
  description String?
  useCase     String? 
  status      String? //the xnode status -> Draft, Running, Off;
  type        String? //Type of Xnode - > Ex: validator
  location    String?
  consoleNodes    String? //The nodes that exists in the console created by the user
  consoleEdges    String? //The edges (connections bettwen nodes) that exists in the console created by the user

  validatorSignature String? //If it is a validator, we request the user to sign a message with its wallet so we can now which wallet we are going to mint tokens of staking - the message signed here is: "I want to participate in the Validator beta"

  url1   String? //Xnode url connection
  url2   String? //Xnode url connection
  url3   String? //Xnode url connection
  url4   String? //Xnode url connection

  adoBuildTag String? //The xnode build tag
  buildId String? //The xnode build id
  serverNumber String? //The number of servers
  serverLoc String? //The server location
  features     String? //The xnode feature

  websocketEnabled Boolean @default(false) //if the xnode websocket is enabled

  openmeshExpertUserId String   
  openmeshExpertUser   OpenmeshExpertUser  @relation(fields: [openmeshExpertUserId], references: [id])

  XnodeClaimActivities XnodeClaimActivities[]

  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt

  @@map("xnode")
}

model Deployment { 
  id String @id @default(uuid())

  provider      String
  isUnit        Boolean
  services      String
  name          String?
  description   String?
  location      String?
  apiKey        String?
  accessToken   String?
  heartbeatData String?

  openmeshExpertUserId String
  openmeshExpertUser   OpenmeshExpertUser  @relation(fields: [openmeshExpertUserId], references: [id])
  XnodeClaimActivities XnodeClaimActivities[]

  createdAt     DateTime  @default(now())
  // TODO: Use this to track "heartbeat" of system.
  updatedAt     DateTime? @updatedAt

  @@map("deployment")
}

//The xnodes that the users will be able to deploy and manage
model XnodeClaimActivities { 
  id String @id @default(uuid())

  wallet        String?
  amount        String?
  txStatus      String?
  isClaimed     Boolean @default(false)

  xnodeId String  
  xnode   Xnode  @relation(fields: [xnodeId], references: [id])

  deploymentId String  
  deployment   Deployment  @relation(fields: [deploymentId], references: [id])

  createdAt     DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("xnodeClaimActivities")
}

model PythiaChat { 
  id String @id @default(uuid())

  name String?

  openmeshExpertUserId String   
  openmeshExpertUser   OpenmeshExpertUser  @relation(fields: [openmeshExpertUserId], references: [id])

  PythiaInputs   PythiaInput[]

  createdAt     DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("pythiaChat")
}

model PythiaInput { 
  id String @id @default(uuid())

  userMessage   String? @db.Text  //the input that the user will create
  response      String? @db.Text  // the answer that the llm model will give to the user

  badResponseFeedback Boolean @default(false)

  pythiaChatId String   
  pythiaChat   PythiaChat  @relation(fields: [pythiaChatId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("pythiaInput")
}

model LLMInstance { 
  id String @id @default(uuid())

  name          String?

  urlEndpoint   String? //aws sagemaker endpoint to call the model
  modelId      String? //aws sagemaker model id

  createdAt     DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("llmInstance")
}
